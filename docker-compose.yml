# This configuration is intended for development purpose, it's **your** responsibility to harden it for production
version: '3.8'
services:

  resource-app:
    image: resource-service
    build: ./resource-service
    networks:
      - resource-app-bridge
    env_file:
      - .env
    environment:
      MYSQL_HOST: mysql8
    ports:
      - 127.0.0.1:8090:8080
    depends_on:
      - config-service
      - kafka
      - mysql8

  resource-processor-app:
    image: resource-processor
    build: ./resource-processor
    networks:
      - resource-app-bridge
    env_file:
      - .env
    environment:
      SONGS_SERVICE_NAME: song-service
      RESOURCE_SERVICE_NAME: resource-service
    ports:
      - 127.0.0.1:8081:8080
    depends_on:
      - config-service
      - kafka

  songs-app:
    image: song-service
    build: ./song-service
    networks:
      - resource-app-bridge
    env_file:
      - .env
    environment:
      MYSQL_HOST: mysql8-songs
    deploy:
        mode: replicated
        replicas: 2
    ports:
      - 127.0.0.1:8082-8085:8080
    depends_on:
      - config-service
      - mysql8-songs

  storage-app:
    image: storage-service
    build: ./storage-service
    networks:
      - resource-app-bridge
    env_file:
      - .env
    environment:
      MYSQL_HOST: mysql8-storage
    ports:
      - 127.0.0.1:8086:8080
    depends_on:
      - config-service
      - mysql8-storage

  eureka-service:
    image: eureka-service
    build: ./eureka-service-discovery
    networks:
      - resource-app-bridge
    environment:
      JAVA_OPTIONS: -Xmx512m -Xms256m
    ports:
      - 127.0.0.1:8761:8761

  config-service:
    image: config-service
    build: ./config-service
    networks:
      - resource-app-bridge
    environment:
      JAVA_OPTIONS: -Xmx512m -Xms256m
      GIT_REPO_URL: /app/config
    ports:
      - 127.0.0.1:9000:9000
    depends_on:
      - eureka-service

  auth-server:
    image: auth-server
    build: ./auth-server
    networks:
      - resource-app-bridge
    environment:
      JAVA_OPTIONS: -Xmx512m -Xms256m
    ports:
      - 127.0.0.1:9100:9100
    depends_on:
      - config-service

  api-gateway:
    image: api-gateway
    build: ./api-gateway
    networks:
      - resource-app-bridge
    env_file:
      - .env
    ports:
      - 127.0.0.1:8080:8080
    depends_on:
      - config-service

  mysql8:
    image: mysql:latest
    networks:
      - resource-app-bridge
    volumes:
      - ./config/mysql:/etc/mysql/conf.d
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: as_resources
    ports:
      - 127.0.0.1:3306:3306
    command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp

  mysql8-songs:
    image: mysql:latest
    networks:
      - resource-app-bridge
    volumes:
      - ./config/mysql:/etc/mysql/conf.d
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: songs
    ports:
      - 127.0.0.1:3307:3306
    command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp

  mysql8-storage:
    image: mysql:latest
    networks:
      - resource-app-bridge
    volumes:
      - ./config/mysql/mysql:/etc/mysql/conf.d
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: storages
    ports:
      - 127.0.0.1:3308:3306
    command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp

  localstack:
    image: localstack/localstack
    networks:
      - resource-app-bridge
    hostname: localstack
    ports:
      - "4567:4566"
    environment:
      - SERVICES=s3:4566
      - HOSTNAME=localstack
      - HOSTNAME_EXTERNAL=localstack
      - DEFAULT_REGION=us-east-1

  aws-cli:
    image: amazon/aws-cli
    networks:
      - resource-app-bridge
    depends_on:
      - localstack
    volumes:
      - ./config:/aws
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-2
    entrypoint: /bin/sh -c
    command: >
      "
        aws --endpoint-url=http://localstack:4566 s3api create-bucket --bucket staging-bucket --region us-east-1
        aws --endpoint-url=http://localstack:4566 s3api create-bucket --bucket permanent-bucket --region us-east-1
        aws --endpoint-url=http://localstack:4566 s3 cp config/testData.csv s3://staging-bucket//testData.csv
      "

  zookeeper:
    platform: linux/amd64
    image: confluentinc/cp-zookeeper:5.0.1
    container_name: as-zookeeper
    networks:
      - resource-app-bridge
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    extra_hosts:
      - "moby:127.0.0.1"
      - "kafka:127.0.0.1"

  kafka:
    platform: linux/amd64
    image: confluentinc/cp-kafka:6.2.8
    container_name: as-kafka
    networks:
      - resource-app-bridge
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    extra_hosts:
      - "moby:127.0.0.1"
      - "localhost:127.0.0.1"

  kafka-ui:
    container_name: as-kafka-ui
    image: provectuslabs/kafka-ui:latest
    networks:
      - resource-app-bridge
    ports:
      - "18080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.50.0
    networks:
      - resource-app-bridge
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    networks:
      - resource-app-bridge
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./config/grafana:/etc/grafana/provisioning/datasources

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    networks:
      - resource-app-bridge
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
      - MYSQL_HOST=mysql
      - ZIPKIN_LOG_LEVEL=DEBUG
      - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
    container_name: elasticsearch
    volumes:
      - ./config/elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      BOOTSTRAP_MEMORY_LOCK: "true"
      ES_JAVA_OPTS: -Xms512m -Xmx1024m
      bootstrap.system_call_filter: false
      discovery.type: single-node
    networks:
      - resource-app-bridge
    ulimits:
      memlock:
        soft: -1
        hard: -1

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.14
    command: -f /etc/logstash/conf.d/
    volumes:
      - ./config/logstash/:/etc/logstash/conf.d/
      - logstashdata01:/usr/share/logstash/data
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - resource-app-bridge
    depends_on:
      - elasticsearch
    links:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.14
    volumes:
      - ./config/elk/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kibanadata:/usr/share/kibana/data
    ports:
      - "5601:5601"
    networks:
      - resource-app-bridge
    depends_on:
      - elasticsearch
    links:
      - elasticsearch

volumes:
  resourceapp:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata01:
    driver: local

networks:
  resource-app-bridge:
    driver: bridge
